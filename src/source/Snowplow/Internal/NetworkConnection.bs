' Copyright (c) 2021 Snowplow Analytics Ltd. All rights reserved.
'
' This program is licensed to you under the Apache License Version 2.0,
' and you may not use this file except in compliance with the Apache License Version 2.0.
' You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
'
' Unless required by applicable law or agreed to in writing,
' software distributed under the Apache License Version 2.0 is distributed on an
' "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

' This file was adapted from the rokucommunity/roku-requests package that is distributed with the following copyright and license.
' MIT License
'
' Copyright (c) 2018 Blake Visin
'
' Permission is hereby granted, free of charge, to any person obtaining a copy
' of this software and associated documentation files (the "Software"), to deal
' in the Software without restriction, including without limitation the rights
' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
' copies of the Software, and to permit persons to whom the Software is
' furnished to do so, subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all
' copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
' SOFTWARE.

import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/roku_modules/rokurequests/Requests.brs"
import "pkg:/source/Snowplow/Internal/TrackerConstants.bs"

namespace Snowplow.Internal
    class NetworkConnection
        sub new()
            m.log = new log.Logger("Snowplow")
        end sub

        function postRequest(url as string, body as dynamic, retryCount as integer) as boolean
            constants = new Snowplow.Internal.TrackerConstants()
            response = m.request("POST", url, {
                headers: {
                    "Content-Type": constants.POST_CONTENT_TYPE
                },
                json: body,
                retryCount: retryCount
            })
            return response.ok
        end function

        function getRequest(url as string, params as dynamic, retryCount as integer) as boolean
            response = m.request("GET", url, {
                params: params,
                retryCount: retryCount
            })
            return response.ok
        end function

        private function request(method, url as string, args as object)
            _params = {}
            _headers = {}
            ' _cookies = invalid
            _data = invalid
            _json = invalid
            _timeout = 30000
            _retryCount = 0
            ' _allow_redirects = true
            _verify = "common:/certs/ca-bundle.crt"

            if args <> invalid and type(args) = "roAssociativeArray"
                if args.params <> invalid and type(args.params) = "roAssociativeArray"
                    _params = args.params
                end if
                if args.headers <> invalid and type(args.headers) = "roAssociativeArray"
                    _headers = args.headers
                end if
                if args.data <> invalid and (type(args.data) = "String" or type(args.data) = "roString")
                    _data = args.data
                end if
                if args.json <> invalid and type(args.json) = "roAssociativeArray"
                    _json = FormatJson(args.json)
                end if
                if args.timeout <> invalid and (type(args.timeout) = "Integer" or type(args.timeout) = "roInteger")
                    _timeout = args.timeout
                end if
                if args.retryCount <> invalid and (type(args.retryCount) = "Integer" or type(args.retryCount) = "roInteger")
                    _retryCount = args.retryCount
                end if
                if args.verify <> invalid and (type(args.verify) = "String" or type(args.verify) = "roString")
                    _verify = args.verify
                end if
            end if

            requestHeaders = rokurequests_Requests_headers()
            requestHeaders.addHeadersAA(_headers)

            requestQueryString = rokurequests_Requests_queryString()
            requestQueryString.addParamsAA(_params)

            ' Setup the data (we overwrite JSON if it's provided)
            if _data <> invalid
                data = _data
            else if _json <> invalid
                data = _json
                requestHeaders.addHeader("Content-Type", "application/json")
            else
                data = ""
            end if

            url = requestQueryString.append(url)
            headers = requestHeaders._headers

            response = m.runRequest(method, url, headers, data, _timeout, _retryCount, _verify)
            return response
        end function

        private function runRequest(method, url, headers, data, timeout, retryCount, verify)
            urlTransfer = rokurequests_RequestsUrlTransfer(true, true, verify)
            urlTransfer.setUrl(url)
            urlTransfer.SetHeaders(headers)

            cancel_and_return = false

            responseEvent = invalid
            requestDetails = {
                timesTried: 0,
            }

            'while we still have try times
            while retryCount >= 0
                'deincrement the number of retries
                retryCount = retryCount - 1
                requestDetails.timesTried = requestDetails.timesTried + 1

                sent = false
                if method = "POST"
                    sent = urlTransfer.AsyncPostFromString(data)
                else if method = "GET"
                    sent = urlTransfer.AsyncGetToString()
                end if

                if sent = true
                    clock = CreateObject("roTimespan")
                    timeout_call = clock.TotalMilliseconds() + timeout

                    event = invalid
                    while true and cancel_and_return = false
                        if m.top <> invalid
                            if m.top.quit <> invalid
                                cancel_and_return = m.top.quit
                            end if
                        end if

                        event = urlTransfer.GetPort().GetMessage()

                        if type(event) = "roUrlEvent"
                            exit while
                        end if

                        if clock.TotalMilliseconds() > timeout_call
                            exit while
                        end if
                    end while

                    if type(event) = "roUrlEvent"
                        responseEvent = event
                        responseCode = event.GetResponseCode()
                        if responseCode > 0 and responseCode < 400
                            'Response was good, so we break the while
                            exit while
                        else
                            'We have a bad response
                            m.log.debug(`[http] ${responseCode} bad response, (will retry ${retryCount}): ${method} request to ${urlTransfer.GetURL()}`)
                        end if
                    else
                        if m.cancel_and_return = true
                            m.log.debug(`[http] Killing the task: ${method} request to ${urlTransfer.GetURL()}`)
                            exit while
                        else
                            'We timed out so we should cancel the request
                            urlTransfer.AsyncCancel()
                            'Exponential backoff timeouts
                            timeout = timeout * 2
                            m.log.debug(`[http] Event timed out (timeout ${timeout}): ${method} request to ${urlTransfer.GetURL()}`)
                        end if
                    end if
                end if
            end while

            return m.response(urlTransfer, responseEvent, requestDetails)
        end function

        private function response(urlTransfer as object, responseEvent as object, requestDetails as object)
            rr = {}

            rr.timesTried = requestDetails.timesTried
            rr.url = urlTransfer.GetUrl()
            rr.ok = false

            if responseEvent <> invalid
                rr.statusCode = responseEvent.GetResponseCode()
                rr.text = responseEvent.GetString()
                rr.headers = responseEvent.GetResponseHeaders()
                rr.headersArray = responseEvent.GetResponseHeadersArray()

                rr.GetSourceIdentity = responseEvent.GetSourceIdentity()
                rr.GetFailureReason = responseEvent.GetFailureReason()
                rr.target_ip = responseEvent.GetTargetIpAddress()
                if rr.statusCode > 0 and rr.statusCode < 400
                    rr.ok = true
                end if
            end if

            if rr.text <> invalid
                rr.body = rr.text
            end if

            return rr
        end function
    end class
end namespace
