' Copyright (c) 2021 Snowplow Analytics Ltd. All rights reserved.
'
' This program is licensed to you under the Apache License Version 2.0,
' and you may not use this file except in compliance with the Apache License Version 2.0.
' You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
'
' Unless required by applicable law or agreed to in writing,
' software distributed under the Apache License Version 2.0 is distributed on an
' "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

import "pkg:/source/Snowplow/Internal/MediaAdContext.bs"
import "pkg:/source/Snowplow/Internal/MediaAdBreakContext.bs"
import "pkg:/source/Snowplow/Internal/MediaTracking.bs"
import "pkg:/source/Snowplow/Internal/ScreenContext.bs"
import "pkg:/source/Snowplow/Internal/SelfDescribing.bs"
import "pkg:/source/Snowplow/Internal/Subject.bs"

import "pkg:/source/roku_modules/log/LogMixin.brs"

namespace Snowplow.Internal
    class Tracker
        configuration as Object
        emitter as Object
        subject as Object
        trackedVideos as Object
        prevScreen as Object

        sub new(configuration as Object, emitter as Object)
            m.configuration = configuration
            m.emitter = emitter
            m.subject = new Snowplow.Internal.Subject(configuration)
            m.trackedMedia = []
            m.prevScreen = invalid
            m.log = new log.Logger("Snowplow")
        end sub

        sub trackEvent(event as Object)
            m.subject.updateEvent(event)

            if m.prevScreen <> invalid
                screen = new Snowplow.Internal.ScreenContext()

                screen.id = m.prevScreen.id
                screen.name = m.prevScreen.name
                screen.type = m.prevScreen.type

                event.addContext(screen)
            end if

            event.describe(m.log)
            m.emitter.add(event)
        end sub

        sub updateConfiguration(configuration)
            m.configuration = configuration
            m.subject.configuration = configuration
            m.emitter.configuration = configuration
        end sub

        sub trackMedia(data, port)
            media = data.media ?? data.video ?? data.audio
            version = data.version ?? 1

            tracking = invalid
            if version = 1
                tracking = new Snowplow.Internal.VideoTracking(data)
            else if version = 2
                tracking = new Snowplow.Internal.MediaTracking(data)
            else
                m.log.error(`[tracker] Unknown media tracking version: ${version}`)
                return
            end if
            m.trackedMedia.push({
                media: media,
                tracking: tracking,
                version: version
            })
            tracking.startObserving(port)
        end sub

        sub trackMediaEvent(data, port)
            media = data.media ?? data.video ?? data.audio

            adContext = invalid
            ad = data.ad
            if ad <> invalid
                adContext = new Snowplow.Internal.MediaAdContext()
                adContext.adId = ad.adId
                adContext.name = ad.name
                adContext.creativeId = ad.creativeId
                adContext.podPosition = ad.podPosition
                adContext.duration = ad.duration
                adContext.skippable = ad.skippable
            end if

            breakContext = invalid
            adBreak = data.adBreak
            if adBreak <> invalid
                breakContext = new Snowplow.Internal.MediaAdBreakContext()
                breakContext.breakId = adBreak.breakId
                breakContext.name = adBreak.name
                breakContext.startTime = adBreak.startTime
                breakContext.breakType = adBreak.breakType
                breakContext.podSize = adBreak.podSize
            end if

            for each v in m.trackedMedia
                if not media.isSameNode(v.media) then continue for
                event = new Snowplow.Internal.SelfDescribing(data)
                v.tracking.addContext(event, media)

                if adContext <> invalid
                    event.addContext(adContext)
                end if
                if breakContext <> invalid
                    event.addContext(breakContext)
                end if

                m.trackEvent(event)
            end for
        end sub

        sub stopTrackingMedia(data, port)
            media = data.media ?? data.video ?? data.audio
            version = data.version ?? 1

            tracking = m.getMediaTrackingForNode(media, version)
            if tracking = invalid
                m.log.error("[tracker] Media tracking not initialized for the node.")
            else
                tracking.stopObserving()

                trackedMedia = []
                for each v in m.trackedMedia
                    if media.isSameNode(v.media) and v.version = version then continue for
                    trackedMedia.push(v)
                end for
                m.trackedMedia = trackedMedia
            end if
        end sub

        sub trackMediaEvents(field, node, info, data)
            found = false
            for each media in m.trackedMedia
                if node.isSameNode(media.media)
                    found = true
                    tracking = media.tracking
                    events = tracking.getEventsForFieldChange(field, data, info)
                    for each event in events
                        m.trackEvent(event)
                    end for
                end if
            end for

            if not found
                m.log.error("[tracker] Media tracking not initialized for the video.")
            end if
        end sub

        private function getMediaTrackingForNode(node, version) as dynamic
            for each media in m.trackedMedia
                if node.isSameNode(media.media) and media.version = version then return media.tracking
            end for
            return invalid
        end function
    end class
end namespace
