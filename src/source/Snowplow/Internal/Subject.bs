' Copyright (c) 2021 Snowplow Analytics Ltd. All rights reserved.
'
' This program is licensed to you under the Apache License Version 2.0,
' and you may not use this file except in compliance with the Apache License Version 2.0.
' You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
'
' Unless required by applicable law or agreed to in writing,
' software distributed under the Apache License Version 2.0 is distributed on an
' "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

import "pkg:/source/Snowplow/Internal/ApplicationContextBuilder.bs"
import "pkg:/source/Snowplow/Internal/DeviceInfoContextBuilder.bs"
import "pkg:/source/Snowplow/Internal/ClientSessionContextBuilder.bs"

namespace Snowplow.Internal
    class Subject
        configuration as object
        deviceInfoContextBuilder as object
        sessionContextBuilder as object
        applicationContextBuilder as object
        newInstall as boolean

        sub new(configuration as object)
            m.configuration = configuration
            m.deviceInfoContextBuilder = new Snowplow.Internal.DeviceInfoContextBuilder()
            m.sessionContextBuilder = new Snowplow.Internal.ClientSessionContextBuilder(configuration)
            m.applicationContextBuilder = new Snowplow.Internal.ApplicationContextBuilder()

            m.newInstall = m.sessionContextBuilder.isNewInstall()
        end sub

        sub updateEvent(event as object)
            if event.domainSessionId = invalid then event.domainSessionId = m.getDomainSessionId()
            if event.domainUserId = invalid then event.domainUserId = m.getDomainUserId()
            if event.networkUserId = invalid then event.networkUserId = m.getNetworkUserId()
            if event.appId = invalid then event.appId = m.getAppId()
            if event.userId = invalid then event.userId = m.getUserId()

            event.trackerVersion = m.getTrackerVersion()
            event.trackerNamespace = m.getTrackerNamespace()
            event.platform = m.getPlatform()
            event.timezone = m.getTimezone()
            event.language = m.getLanguage()
            event.resolution = m.getResolution()
            event.viewport = m.getViewport()

            deviceInfoContext = m.deviceInfoContextBuilder.getContext(m.configuration)
            if deviceInfoContext <> invalid then event.addContext(deviceInfoContext)

            m.sessionContextBuilder.updateState(event, m.configuration.sessionAsCookies, m.configuration.userAnonymous, m.configuration.sessionAnonymous)
            clientSessionContext = m.sessionContextBuilder.getContext(m.configuration)
            if clientSessionContext <> invalid then event.addContext(clientSessionContext)

            applicationContext = m.applicationContextBuilder.getContext(m.configuration)
            if applicationContext <> invalid then event.addContext(applicationContext)
        end sub

        private function getDomainSessionId() as dynamic
            return m.configuration.domainSessionId
        end function

        private function getDomainUserId() as dynamic
            return m.configuration.domainUserId
        end function

        private function getNetworkUserId() as dynamic
            return m.configuration.networkUserId
        end function

        private function getUserId() as dynamic
            return m.configuration.userId
        end function

        private function getAppId() as dynamic
            return m.configuration.appId
        end function

        private function getPlatform() as string
            return "tv"
        end function

        private function getTimezone() as string
            deviceInfo = CreateObject("roDeviceInfo")
            return deviceInfo.GetTimeZone()
        end function

        private function getLanguage() as string
            deviceInfo = CreateObject("roDeviceInfo")
            return deviceInfo.GetCurrentLocale()
        end function

        private function getResolution() as string
            deviceInfo = CreateObject("roDeviceInfo")
            displaySize = deviceInfo.GetDisplaySize()
            if displaySize = invalid then return invalid
            return displaySize.w.ToStr() + "x" + displaySize.h.ToStr()
        end function

        private function getViewport() as string
            deviceInfo = CreateObject("roDeviceInfo")
            resolution = deviceInfo.GetUIResolution()
            if resolution = invalid then return invalid
            return resolution.width.ToStr() + "x" + resolution.height.ToStr()
        end function

        private function getTrackerNamespace() as string
            return m.configuration.trackerNamespace
        end function

        private function getTrackerVersion() as string
            return `roku-${Snowplow.Internal.TrackerConstants.TRACKER_VERSION}`
        end function
    end class
end namespace
