' Copyright (c) 2021 Snowplow Analytics Ltd. All rights reserved.
'
' This program is licensed to you under the Apache License Version 2.0,
' and you may not use this file except in compliance with the Apache License Version 2.0.
' You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
'
' Unless required by applicable law or agreed to in writing,
' software distributed under the Apache License Version 2.0 is distributed on an
' "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

import "pkg:/source/Snowplow/Internal/BaseEventContext.bs"

namespace Snowplow.Internal
    class RokuVideoContext extends BaseEventContext
        videoId as string ' ID generated by tracker when video tracking was initialized

        ' content metadata configuration
        contentId as string ' ID in the content metadata of the video
        contentTitle as string ' title in the content metadata of the video
        contentUrl as string ' URL in the content metadata of the video
        contentType as string ' content type (episode, movie, season, ...) in the content metadata
        streamFormat as string ' container format of the played content (e.g., mp4, wma, mkv) in the content metadata

        ' stream info
        streamUrl as string ' URL of the current stream from stream info
        videoFormat as string ' video codec of the currently playing video stream (e.g., hevc, mpeg2, mpeg4_15)
        isUnderrun as boolean ' stream was downloaded due to an underrun
        isResumed as boolean ' playback was resumed after trickplay
        measuredBitrate as integer ' bitrate (bps) of the network when the stream was selected
        streamBitrate as integer ' current bitrate of the stream

        ' playback
        timeToStartStreaming as double ' seconds from playback being started until the video actually began playing
        width as integer ' video play window width in pixels or 0 for full screen
        height as integer ' video play window height in pixels or 0 for full screen
        errorStr as string ' diagnostic message indicating a video play error

        ' parameters
        private RV_VIDEO_ID = "videoId"
        private RV_CONTENT_TITLE = "contentTitle"
        private RV_CONTENT_ID = "contentId"
        private RV_CONTENT_URL = "contentUrl"
        private RV_CONTENT_TYPE = "contentType"
        private RV_STREAM_FORMAT = "streamFormat"
        private RV_STREAM_URL = "streamUrl"
        private RV_VIDEO_FORMAT = "videoFormat"
        private RV_IS_UNDERRUN = "isUnderrun"
        private RV_IS_RESUMED = "isResumed"
        private RV_MEASURED_BITRATE = "measuredBitrate"
        private RV_STREAM_BITRATE = "streamBitrate"
        private RV_TIME_TO_START_STREAMING = "timeToStartStreaming"
        private RV_WIDTH = "width"
        private RV_HEIGHT = "height"
        private RV_ERROR_STR = "errorStr"

        ' constants
        private RV_SCHEMA_ROKU_VIDEO = "iglu:com.roku/video/jsonschema/1-0-0"

        override sub describe(logger)
            infos = [
                `Video ID: ${m.videoId}`,
                `content ID: ${m.contentId}`,
                `title: ${m.contentTitle}`,
                `URL: ${m.contentUrl}`,
                `type: ${m.contentType}`,
                `stream format: ${m.streamFormat}`,
                `stream URL: ${m.streamUrl}`,
                `video format: ${m.videoFormat}`,
                `is underrun: ${m.isUnderrun}`,
                `is resumed: ${m.isResumed}`,
                `measured bitrate: ${m.measuredBitrate}`,
                `time to start streaming: ${m.timeToStartStreaming}`,
                `width: ${m.width}`,
                `height: ${m.height}`,
                `error: ${m.errorStr}`
            ]
            logger.debug(infos.join(", "))
        end sub

        protected override function getPayloadData() as dynamic
            payload = {}
            payload[m.RV_VIDEO_ID] = m.videoId
            if m.contentTitle <> invalid then payload[m.RV_CONTENT_TITLE] = m.contentTitle
            if m.contentId <> invalid then payload[m.RV_CONTENT_ID] = m.contentId
            if m.contentUrl <> invalid then payload[m.RV_CONTENT_URL] = m.contentUrl
            if m.contentType <> invalid then payload[m.RV_CONTENT_TYPE] = m.contentType
            if m.streamFormat <> invalid then payload[m.RV_STREAM_FORMAT] = m.streamFormat
            if m.streamUrl <> invalid then payload[m.RV_STREAM_URL] = m.streamUrl
            if m.videoFormat <> invalid then payload[m.RV_VIDEO_FORMAT] = m.videoFormat
            if m.isUnderrun <> invalid then payload[m.RV_IS_UNDERRUN] = m.isUnderrun
            if m.isResumed <> invalid then payload[m.RV_IS_RESUMED] = m.isResumed
            if m.measuredBitrate <> invalid then payload[m.RV_MEASURED_BITRATE] = m.measuredBitrate
            if m.streamBitrate <> invalid then payload[m.RV_STREAM_BITRATE] = m.streamBitrate
            payload[m.RV_TIME_TO_START_STREAMING] = m.timeToStartStreaming
            payload[m.RV_WIDTH] = m.width
            payload[m.RV_HEIGHT] = m.height
            if m.errorStr <> invalid then payload[m.RV_ERROR_STR] = m.errorStr

            return payload
        end function

        protected override function getSchema() as string
            return m.RV_SCHEMA_ROKU_VIDEO
        end function
    end class
end namespace
