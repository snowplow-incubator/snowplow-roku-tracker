' Copyright (c) 2021 Snowplow Analytics Ltd. All rights reserved.
'
' This program is licensed to you under the Apache License Version 2.0,
' and you may not use this file except in compliance with the Apache License Version 2.0.
' You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
'
' Unless required by applicable law or agreed to in writing,
' software distributed under the Apache License Version 2.0 is distributed on an
' "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

import "pkg:/source/Snowplow/Internal/MediaPlayerEventV2.bs"
import "pkg:/source/Snowplow/Internal/MediaPlayerContextV2.bs"
import "pkg:/source/Snowplow/Internal/MediaSessionContextBuilder.bs"
import "pkg:/source/Snowplow/Internal/RokuVideoContext.bs"

namespace Snowplow.Internal
    enum RokuMediaState
        ERROR = "error"
        FINISHED = "finished"
        STOPPED = "stopped"
        STOPPING = "stopping"
        PAUSED = "paused"
        PLAYING = "playing"
        BUFFERING = "buffering"
        RESUME = "resume"
        REPLAY = "replay"
        SKIP_CONTENT = "skipcontent"
        NONE = "none"
    end enum

    enum MediaTrackingEvent
        READY = "ready"
        PLAY = "play"
        PING = "ping"
        PERCENT_PROGRESS = "percent_progress"
        PAUSE = "pause"
        END = "end"
        ERROR = "error"

        BUFFER_START = "buffer_start"
        BUFFER_END = "buffer_end"
        SEEK_START = "seek_start"
        SEEK_END = "seek_end"

        FULLSCREEN_CHANGE = "fullscreen_change"
        PICTURE_IN_PICTURE_CHANGE = "picture_in_picture_change"
        PLAYBACK_RATE_CHANGE = "playback_rate_change"
        QUALITY_CHANGE = "quality_change"
        VOLUME_CHANGE = "volume_change"

        AD_BREAK_START = "ad_break_start"
        AD_BREAK_END = "ad_break_end"
        AD_CLICK = "ad_click"
        AD_COMPLETE = "ad_complete"
        AD_PAUSE = "ad_pause"
        AD_QUARTILE = "ad_quartile"
        AD_RESUME = "ad_resume"
        AD_SKIP = "ad_skip"
        AD_START = "ad_start"
    end enum

    class MediaTracking
        private id as string
        private media as object
        private includeRokuVideo as boolean

        private label as dynamic
        private mediaType as dynamic

        private captureEvents as object
        private sentBoundaries as object
        private pingInterval as dynamic
        private lastPositionPing as dynamic
        private lastQuality as dynamic

        private stats as object

        private seeking as boolean
        private buffering as boolean
        private ready as boolean

        private entities as object

        private timer as object


        sub new(data)
            options = data.options ?? {}

            m.media = data.media ?? data.video ?? data.audio

            m.id = data.id ?? options.id
            if m.id = invalid then m.id = CreateObject("roDeviceInfo").GetRandomUUID()

            m.entities = data.entities ?? data.context ?? []
            m.includeRokuVideo = data.rokuVideoContext ?? options.rokuVideoContext ?? true

            m.seeking = false
            m.buffering = false
            m.ready = false

            if m.media = invalid
                m.mediaType = invalid
            else
                m.mediaType = LCase(m.media.Subtype())
            end if

            m.label = data.label ?? options.label
            m.captureEvents = {}
            m.sentBoundaries = {}

            pings = data.pings ?? true

            if pings
                m.pingInterval = data.pingInterval ?? options.positionInterval ?? 30
                m.lastPositionPing = 0
            end if

            if data.sessions ?? true
                m.stats = new Snowplow.Internal.MediaSessionContextBuilder(m.id, m.pingInterval)
            end if


            events = data.captureEvents ?? options.captureEvents ?? [
                MediaTrackingEvent.READY,
                MediaTrackingEvent.PLAY,
                MediaTrackingEvent.PING,
                MediaTrackingEvent.PERCENT_PROGRESS,
                MediaTrackingEvent.PAUSE,
                MediaTrackingEvent.END,
                MediaTrackingEvent.ERROR,
                MediaTrackingEvent.BUFFER_START,
                MediaTrackingEvent.BUFFER_END,
                MediaTrackingEvent.SEEK_START,
                MediaTrackingEvent.SEEK_END,
                MediaTrackingEvent.FULLSCREEN_CHANGE,
                MediaTrackingEvent.PICTURE_IN_PICTURE_CHANGE,
                MediaTrackingEvent.PLAYBACK_RATE_CHANGE,
                MediaTrackingEvent.QUALITY_CHANGE,
                MediaTrackingEvent.VOLUME_CHANGE
            ]

            for each event in events
                m.captureEvents[m.translateEvent(event)] = true
            end for

            ' m.boundaries
            boundaries = data.boundaries ?? options.boundaries ?? [25, 50, 75]
            for each boundary in boundaries
                m.sentBoundaries[m.toBoundaryKey(boundary)] = false
            end for
        end sub

        sub startObserving(port)
            for each field in m.getObservedFields()
                m.media.observeField(field, port, m.getInfoFields())
            end for
        end sub

        sub stopObserving()
            for each field in m.getObservedFields()
                m.media.unobserveField(field)
            end for
        end sub

        function getEventsForFieldChange(field, data, info) as dynamic
            if field = "state"
                return m.getEventsForStateChange(data, info)
            else if field = "position"
                return m.getEventsForPositionChange(data, info)
            else if field = "control"
                return m.getEventsForControlChange(data, info)
            else if field = "mute"
                return [m.createEvent(MediaTrackingEvent.VOLUME_CHANGE, info)]
            else if field = "playbackSpeed"
                return [m.createEvent(MediaTrackingEvent.PLAYBACK_RATE_CHANGE, info)]
            else if field = "trickPlayMode"
                return m.getEventsForTrickPlayModeChange(data, info)
            else if field = "streamingSegment"
                return m.getEventsForQualityChange(data, info)
            else if field = "duration" and m.captureEvent(MediaTrackingEvent.READY) and not m.ready
                m.ready = true
                return [m.createEvent(MediaTrackingEvent.READY, info)]
            else
                return []
            end if
        end function

        private function getEventsForStateChange(state, info) as dynamic
            events = []

            if state = RokuMediaState.PAUSED and m.seeking
                return events
            else if state = RokuMediaState.BUFFERING
                m.buffering = true
            else if m.buffering
                event = m.createEvent(MediaTrackingEvent.BUFFER_END, info)
                if m.captureEvent(MediaTrackingEvent.BUFFER_END) then events.push(event)
                m.buffering = false
            end if

            event = m.createEvent(m.translateEvent(state), info)

            if m.captureEvent(m.translateEvent(state)) then events.push(event)

            return events
        end function

        private function getEventsForControlChange(control, info) as dynamic
            event = m.createEvent(m.translateEvent(control), info)
            if not m.captureEvent(control) then return []
            return [event]
        end function

        private function getEventsForTrickPlayModeChange(trickPlayMode, info) as dynamic
            if trickPlayMode <> "play" and trickPlayMode <> "pause" and not m.seeking
                m.seeking = true
                event = m.createEvent(MediaTrackingEvent.SEEK_START, info)
                if m.captureEvent(MediaTrackingEvent.SEEK_START) then return [event]
            else if trickPlayMode = "play" and m.seeking
                m.seeking = false
                event = m.createEvent(MediaTrackingEvent.SEEK_END, info)
                if m.captureEvent(MediaTrackingEvent.SEEK_END) then return [event]
            end if

            return []
        end function

        private function getEventsForPositionChange(position, info) as dynamic
            events = []

            if m.seeking then return events

            percentageProgressEvent = m.getPercentageProgressEventForPositionChange(info)
            if percentageProgressEvent <> invalid then events.push(percentageProgressEvent)

            positionEvent = m.getPositionEventForPositionChange(info)
            if positionEvent <> invalid then events.push(positionEvent)

            return events
        end function

        private function getPercentageProgressEventForPositionChange(info) as dynamic
            if not m.captureEvent(MediaTrackingEvent.PERCENT_PROGRESS) then return invalid

            boundary = m.getCurrentPercentBoundary(info)
            if boundary <> invalid and not m.sentBoundaries[m.toBoundaryKey(boundary)]
                event = m.createEvent(MediaTrackingEvent.PERCENT_PROGRESS, info)
                m.sentBoundaries[m.toBoundaryKey(boundary)] = true
                return event
            end if

            return invalid
        end function

        private function getPositionEventForPositionChange(info) as dynamic
            if not m.captureEvent(MediaTrackingEvent.PING) then return invalid

            if m.pingInterval <> invalid and Abs(info.position - m.lastPositionPing) >= m.pingInterval
                m.lastPositionPing = info.position
                event = m.createEvent(MediaTrackingEvent.PING, info)
                return event
            end if

            return invalid
        end function

        private function getEventsForQualityChange(streamSegmentInfo, info) as dynamic
            if not m.captureEvent(MediaTrackingEvent.QUALITY_CHANGE)
                return []
            else if m.lastQuality = invalid
                m.lastQuality = streamSegmentInfo.segBitrateBps
            else if m.lastQuality <> streamSegmentInfo.segBitrateBps
                event = m.createEvent(MediaTrackingEvent.QUALITY_CHANGE, info)
                m.lastQuality = streamSegmentInfo.segBitrateBps
                return [event]
            end if

            return []
        end function

        private function createEvent(eventType as string, info as object) as object
            payload = m.extractPayload(eventType, info, m.getPercentProgress(info))
            event = new Snowplow.Internal.MediaPlayerEventV2(eventType, payload)
            m.addContext(event, info)
            return event
        end function

        private function extractPayload(eventType as string, info as object, percentProgress as dynamic) as object
            payload = {}

            if eventType = MediaTrackingEvent.ERROR
                payload.Append({
                    "errorCode": info.errorCode,
                    "errorName": info.errorMsg,
                    "errorDescription": info.errorStr
                })
            else if eventType = MediaTrackingEvent.PERCENT_PROGRESS
                payload.Append({ "percentProgress": percentProgress })
            else if eventType = MediaTrackingEvent.FULLSCREEN_CHANGE
                payload.Append({})
            else if eventType = MediaTrackingEvent.PICTURE_IN_PICTURE_CHANGE
                payload.Append({})
            else if eventType = MediaTrackingEvent.PLAYBACK_RATE_CHANGE
                payload.Append({
                    "newRate": info.playbackSpeed
                })
            else if eventType = MediaTrackingEvent.QUALITY_CHANGE
                payload.Append({
                    "previousQuality": m.lastQuality.ToStr(),
                    "newQuality": info.streamingSegment.segBitrateBps.ToStr(),
                    bitrate: info.streamingSegment.segBitrateBps,
                    automatic: true
                })
            else if eventType = MediaTrackingEvent.VOLUME_CHANGE
                if info
                    payload.Append({
                        "previousVolume": 100,
                        "newVolume": 0
                    })
                else
                    payload.Append({
                        "previousVolume": 0,
                        "newVolume": 100
                    })
                end if
            end if

            return payload
        end function

        sub addContext(event as object, info as object)
            mediaPlayerContext = new Snowplow.Internal.MediaPlayerContextV2()
            mediaPlayerContext.currentTime = info.position
            mediaPlayerContext.duration = info.duration
            mediaPlayerContext.ended = info.state = "finished"
            mediaPlayerContext.fullscreen = true
            if info.content <> invalid then mediaPlayerContext.livestream = info.content.Live
            mediaPlayerContext.label = m.label
            mediaPlayerContext.loop = info.loop ?? false
            mediaPlayerContext.mediaType = m.mediaType
            mediaPlayerContext.muted = info.mute ?? false
            mediaPlayerContext.paused = info.state <> RokuMediaState.PLAYING
            mediaPlayerContext.pictureInPicture = invalid
            mediaPlayerContext.playbackRate = info.playbackSpeed ?? 1
            mediaPlayerContext.playerType = `com.roku-${m.mediaType}`
            mediaPlayerContext.quality = CreateObject("roDeviceInfo").GetVideoMode()
            mediaPlayerContext.volume = 100
            event.addContext(mediaPlayerContext)

            if m.stats <> invalid
                mediaSessionContext = m.stats.getContext(event, mediaPlayerContext)
                event.addContext(mediaSessionContext)
            end if

            if m.includeRokuVideo
                rokuVideoContext = new Snowplow.Internal.RokuVideoContext()
                rokuVideoContext.videoId = m.id
                rokuVideoContext.contentId = m.getContentId(info)
                rokuVideoContext.contentTitle = m.getContentTitle(info)
                rokuVideoContext.contentUrl = m.getContentUrl(info)
                rokuVideoContext.contentType = m.getContentType(info)
                rokuVideoContext.streamFormat = m.getStreamFormat(info)
                rokuVideoContext.streamUrl = m.getStreamUrl(info)
                rokuVideoContext.videoFormat = m.getMediaFormat(info)
                rokuVideoContext.isUnderrun = m.isUnderrun(info)
                rokuVideoContext.isResumed = m.isResumed(info)
                rokuVideoContext.measuredBitrate = m.getMeasuredBitrate(info)
                rokuVideoContext.streamBitrate = m.getStreamBitrate(info)
                rokuVideoContext.timeToStartStreaming = info.timeToStartStreaming
                rokuVideoContext.width = info.width
                rokuVideoContext.height = info.height
                rokuVideoContext.errorStr = m.getErrorStr(info)
                event.addContext(rokuVideoContext)
            end if

            for each e in m.entities
                event.addContext(e)
            end for
        end sub

        private function getInfoFields() as object
            return [
                "audioFormat",
                "content",
                "duration",
                "errorCode",
                "errorMsg",
                "errorStr",
                "height",
                "loop",
                "mute",
                "playbackSpeed",
                "position",
                "state",
                "streamInfo",
                "streamingSegment",
                "trickPlayMode",
                "timeToStartStreaming",
                "videoFormat",
                "width"
            ]
        end function

        private function getObservedFields() as object
            return [
                "position",
                "state",
                "mute",
                "playbackSpeed",
                "control",
                "trickPlayMode",
                "streamingSegment",
                "duration"
            ]
        end function

        private function getPercentProgress(info as object) as dynamic
            if info.position <> invalid and info.duration <> invalid and info.duration > 0
                percentage = 100 * info.position / info.duration
                if type(percentage) = "Integer" then return percentage
                return Int(percentage)
            else
                return invalid
            end if
        end function

        private function getCurrentPercentBoundary(info as object) as dynamic
            percentProgress = m.getPercentProgress(info)
            if percentProgress = invalid then return invalid

            boundary = invalid
            for each b in m.sentBoundaries
                boundaryToSend = b.toInt()
                if percentProgress >= boundaryToSend and boundaryToSend > (boundary ?? -1)
                    boundary = boundaryToSend
                end if
            end for

            return boundary
        end function

        private function translateEvent(eventName as string) as string
            if eventName = RokuMediaState.BUFFERING
                return MediaTrackingEvent.BUFFER_START
            else if eventName = RokuMediaState.PLAYING
                return MediaTrackingEvent.PLAY
            else if eventName = RokuMediaState.REPLAY
                return MediaTrackingEvent.PLAY
            else if eventName = RokuMediaState.RESUME
                return MediaTrackingEvent.PLAY
            else if eventName = RokuMediaState.SKIP_CONTENT
                return MediaTrackingEvent.END
            else if eventName = RokuMediaState.FINISHED
                return MediaTrackingEvent.END
            else if eventName = RokuMediaState.PAUSED
                return MediaTrackingEvent.PAUSE
            else if eventName = RokuMediaState.ERROR
                return MediaTrackingEvent.ERROR
            else if eventName = RokuMediaState.STOPPED
                return eventName
            else if eventName = RokuMediaState.STOPPING
                return eventName
            else if eventName = RokuMediaState.NONE
                return eventName
            else
                return eventName
            end if
        end function

        private function captureEvent(eventName) as boolean
            return m.captureEvents[m.translateEvent(eventName)] ?? false
        end function

        private function toBoundaryKey(percentage) as string:
            return Int(percentage).ToStr()
        end function

        private function getContentType(info) as dynamic
            if info.content <> invalid and info.content.contentType <> invalid and info.content.ContentType > 0
                mappings = {
                    "1": "movie",
                    "2": "series",
                    "3": "season",
                    "4": "episode",
                    "5": "audio"
                }
                return mappings[info.content.ContentType.ToStr()]
            else
                return invalid
            end if
        end function

        private function getContentId(info) as dynamic
            if info.content <> invalid
                contentId = info.content.id
                if m.isNonEmptyString(info.content.id)
                    return contentId
                else if m.isNonEmptyString(info.content.video_id)
                    return info.content.video_id
                end if
            end if
            return invalid
        end function

        private function getContentTitle(info) as dynamic
            if info.content <> invalid
                title = info.content.title
                if m.isNonEmptyString(title) then return title
            end if
            return invalid
        end function

        private function getContentUrl(info) as dynamic
            if info.content <> invalid
                url = info.content.url
                if m.isNonEmptyString(url) then return url
            end if
            return invalid
        end function

        private function getStreamFormat(info) as dynamic
            if info.content <> invalid
                format = info.content.StreamFormat
                if m.isNonEmptyString(format) and format <> "(null)" then return format
            end if
            return invalid
        end function

        private function getStreamUrl(info) as dynamic
            if info.streamInfo <> invalid and m.isNonEmptyString(info.streamInfo.streamUrl)
                return info.streamInfo.streamUrl
            end if
            return invalid
        end function

        private function isUnderrun(info) as dynamic
            if info.streamInfo <> invalid then return info.streamInfo.isUnderrun
            return invalid
        end function

        private function isResumed(info) as dynamic
            if info.streamInfo <> invalid then return info.streamInfo.isResumed
            return invalid
        end function

        private function getMeasuredBitrate(info) as dynamic
            if info.streamInfo <> invalid then return info.streamInfo.measuredBitrate
            return invalid
        end function

        private function getStreamBitrate(info) as dynamic
            if info.streamInfo <> invalid then return info.streamInfo.streamBitrate
            return invalid
        end function

        private function getErrorStr(info) as dynamic
            if m.isNonEmptyString(info.errorStr) then return info.errorStr
            return invalid
        end function

        private function getMediaFormat(info) as dynamic
            if m.isNonEmptyString(info.videoFormat) then return info.videoFormat
            if m.isNonEmptyString(info.audioFormat) then return info.audioFormat
            return invalid
        end function

        private function isNonEmptyString(s) as boolean
            return s <> Invalid AND (type(s) = "String" OR type(s) = "roString") AND s <> ""
        end function

    end class
end namespace
