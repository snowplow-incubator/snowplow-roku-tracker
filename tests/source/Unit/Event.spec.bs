import "pkg:/source/Snowplow/Internal/Event.bs"
import "pkg:/source/Snowplow/Internal/Helpers.bs"

namespace tests

    @suite("Event tests")
    class EventTests extends Rooibos.BaseTestSuite

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        @describe("initialization")
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        @it("sets device and true timestamp")
        sub setsDeviceAndTrueTimestamp()
            tm1 = m.getTimestamp()
            event = new Snowplow.Internal.Event({ ttm: tm1 })
            tm2 = m.getTimestamp()

            m.assertNotInvalid(event.deviceTimestamp)
            m.assertTrue(event.deviceTimestamp >= tm1)
            m.assertTrue(event.deviceTimestamp <= tm2)
            m.assertEqual(tm1, event.trueTimestamp)
        end sub

        @it("sets context")
        sub setsContexts()
            event = new Snowplow.Internal.Event({
                context: [
                    { data: { test: "test1" }, schema: "schema1" },
                    { data: { test: "test2" }, schema: "schema2" }
                ]
            })
            m.assertEqual(2, event.context.count())
            m.assertEqual("schema1", event.context[0].schema)
            m.assertEqual("schema2", event.context[1].schema)
        end sub

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        @describe("validate preparePayloadToSend output")
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        @it("contains required parameters")
        sub payloadContainsRequiredParameters()
            event = new Snowplow.Internal.Event({})
            payload = event.preparePayloadToSend()
            m.assertNotInvalid(payload.dtm)
            m.assertNotInvalid(payload.stm)
            m.assertNotInvalid(payload.eid)
            m.assertInvalid(payload.co)
        end sub

        @it("contains context")
        sub payloadContainsRequiredParameters()
            event = new Snowplow.Internal.Event({
                context: [
                    { data: { test: "test1" }, schema: "schema1" }
                ]
            })
            payload = event.preparePayloadToSend()
            m.assertNotInvalid(payload.co)
            m.assertNotEmpty(payload.co)
            context = ParseJson(payload.co)
            m.assertEqual(context.schema, "iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-1")
            m.assertEqual(context.data.count(), 1)
        end sub

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        @describe("validate prepareDataToSend output")
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        @it("contains schema URI")
        sub hasSchema()
            event = new Snowplow.Internal.Event({})
            data = event.prepareDataToSend()

            m.assertTrue(data.schema.StartsWith("iglu:com.snowplowanalytics.snowplow"))
        end sub

        @it("contains data array")
        sub hasDataArray()
            event = new Snowplow.Internal.Event({})
            data = event.prepareDataToSend()

            m.assertEqual(data.data.Count(), 1)
        end sub

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ' helper functions
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        private function getTimestamp() as string
            helpers = new Snowplow.Internal.Helpers()
            return helpers.currentTimestamp()
        end function
    end class
end namespace
