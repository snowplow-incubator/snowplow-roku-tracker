import "pkg:/source/Snowplow/Internal/MediaTracking.bs"

namespace tests

    @suite("Media tracking tests")
    class MediaTrackingTests extends Rooibos.BaseTestSuite

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        @describe("media tracking events")
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        @it("creates events with context")
        sub createsEventsWithContext()
            mediaTracking = new Snowplow.Internal.MediaTracking({label: "theLabel", media: CreateObject("roSGNode", "Video")})
            events = mediaTracking.getEventsForFieldChange("state", "playing", m.videoInfo())
            m.assertEqual(1, events.count())
            event = events[0]
            m.assertEqual(Snowplow.Internal.MediaTrackingEvent.PLAY, event.eventType)
            m.assertEqual(3, event.context.count())

            mediaPlayerContext = invalid
            mediaSessionContext = invalid
            rokuContext = invalid
            for each context in event.context
                schema = context.getSchema()
                if Instr(1, schema, "media_player") > 0
                    mediaPlayerContext = context
                else if Instr(1, schema, "session") > 0
                    mediaSessionContext = context
                else if Instr(1, schema, "video") > 0
                    rokuContext = context
                else
                    m.fail("unidentified context")
                end if
            end for

            m.assertNotInvalid(mediaPlayerContext)
            m.assertNotInvalid(mediaSessionContext)
            m.assertNotInvalid(rokuContext)

            m.assertEqual(100, mediaPlayerContext.currentTime)
            m.assertEqual(1000, mediaPlayerContext.duration)
            m.assertFalse(mediaPlayerContext.ended)
            m.assertTrue(mediaPlayerContext.fullscreen)
            m.assertFalse(mediaPlayerContext.livestream)
            m.assertEqual("theLabel", mediaPlayerContext.label)
            m.assertFalse(mediaPlayerContext.loop)
            m.assertEqual("video", mediaPlayerContext.mediaType)
            m.assertFalse(mediaPlayerContext.muted)
            m.assertFalse(mediaPlayerContext.paused)
            m.assertInvalid(mediaPlayerContext.pictureInPicture)
            m.assertEqual(1, mediaPlayerContext.playbackRate)
            m.assertEqual("com.roku-video", mediaPlayerContext.playerType)
            m.assertEqual("2160p60b10", mediaPlayerContext.quality)
            m.assertEqual(100, mediaPlayerContext.volume)

            m.assertEqual("Big Buck Bunny", rokuContext.contentTitle)
            m.assertEqual("http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4", rokuContext.streamUrl)
            m.assertTrue(rokuContext.isUnderrun)
            m.assertFalse(rokuContext.isResumed)
            m.assertEqual(100, rokuContext.measuredBitrate)
            m.assertEqual(50, rokuContext.streamBitrate)
            m.assertEqual(0.5, rokuContext.timeToStartStreaming)
        end sub

        @it("creates events for percentage progress")
        sub createsEventsForPercentageProgress()
            mediaTracking = new Snowplow.Internal.MediaTracking({
                boundaries: [50],
                pings: false
            })
            events = mediaTracking.getEventsForFieldChange("position", 500, m.videoInfo(500))
            m.assertEqual(1, events.count())
            event = events[0]
            m.assertEqual("percent_progress", event.eventType)
        end sub

        @it("does not create repeat events for percentage progress")
        sub doesNotCreateRepeatEventsForPercentageProgress()
            mediaTracking = new Snowplow.Internal.MediaTracking({
                boundaries: [50],
                pings: false
            })
            events = mediaTracking.getEventsForFieldChange("position", 500, m.videoInfo(500))
            m.assertEqual(1, events.count())
            events = mediaTracking.getEventsForFieldChange("position", 500, m.videoInfo(500))
            m.assertEqual(0, events.count())
        end sub

        @it("creates position events in specified interval")
        sub positionEventsInSpecifiedInterval()
            mediaTracking = new Snowplow.Internal.MediaTracking({
                captureEvents: ["ping"]
            })
            events = mediaTracking.getEventsForFieldChange("position", 30, m.videoInfo(30))
            m.assertEqual(1, events.count())
            events = mediaTracking.getEventsForFieldChange("position", 33, m.videoInfo(33))
            m.assertEqual(0, events.count())
            events = mediaTracking.getEventsForFieldChange("position", 60, m.videoInfo(60))
            m.assertEqual(1, events.count())
        end sub

        @it("does not create progress events if not enabled in options")
        sub doesNotCreateProgressEventsIfNotEnabledInOptions()
            mediaTracking = new Snowplow.Internal.MediaTracking({
                boundaries: [50]
            })
            events = mediaTracking.getEventsForFieldChange("position", 10, m.videoInfo(10))
            m.assertEqual(0, events.count())
        end sub

        @it("creates events for state changes")
        sub createsEventsForStateChanges()
            mediaTracking = new Snowplow.Internal.MediaTracking({})
            events = mediaTracking.getEventsForFieldChange("state", "playing", m.videoInfo(10))
            m.assertEqual(1, events.count())
            events = mediaTracking.getEventsForFieldChange("state", "paused", m.videoInfo(10))
            m.assertEqual(1, events.count())
        end sub

        @it("does not create events for state changes if not enabled in options")
        sub doesNotCreateEventsForStateChangesIfNotEnabledInOptions()
            mediaTracking = new Snowplow.Internal.MediaTracking({
                captureEvents: ["play"]
            })
            events = mediaTracking.getEventsForFieldChange("state", "playing", m.videoInfo(10, "playing"))
            m.assertEqual(1, events.count())
            events = mediaTracking.getEventsForFieldChange("state", "paused", m.videoInfo(10, "paused"))
            m.assertEqual(0, events.count())
        end sub

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ' Helpers
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        private function videoInfo(position = 100, state = "playing") as object
            return {
                streamInfo: {
                    streamUrl: "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    isUnderrun: true,
                    isResumed: false,
                    measuredBitrate: 100,
                    streamBitrate: 50
                },
                duration: 1000,
                content: {
                    Live: false,
                    Title: "Big Buck Bunny"
                },
                position: position,
                timeToStartStreaming: 0.5,
                state: state,
                loop: false,
                mute: false,
                videoFormat: "mp4"
            }
        end function

    end class
end namespace
