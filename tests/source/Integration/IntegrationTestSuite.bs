import "pkg:/source/roku_modules/rokurequests/Requests.brs"

namespace tests
    class IntegrationTestSuite extends Rooibos.BaseTestSuite

        protected override function setup()
            m.networkConfig = m.getNetworkConfiguration()
        end function

        protected sub assertMicroCounts(validation)
            m.assertMicroResponse(m.networkConfig.collector + "/micro/all", validation)
        end sub

        protected sub assertMicroGoodEvents(validation)
            m.assertMicroResponse(m.networkConfig.collector + "/micro/good", validation)
        end sub

        protected sub resetMicro()
            rokurequests_Requests().get(m.networkConfig.collector + "/micro/reset", {"useCache": false})
        end sub

        protected function getNetworkConfiguration() as object
            result = {}

            raw = ReadASCIIFile("pkg:/manifest")
            lines = raw.Tokenize(Chr(10))
            for each line in lines
                bits = line.Tokenize("=")
                if bits.Count() > 1
                    result.AddReplace(bits[0], bits[1])
                end if
            next
            config = {
                collector: result.snowplow_collector,
                method: result.snowplow_method
            }
            return config
        end function

        private sub assertMicroResponse(api, validation)
            for i = 1 to 5
                sleep(500)
                res = rokurequests_Requests().get(api, {"useCache": false})
                success = validation(res.json)
                if success then return
            end for
            m.fail("Validation of response from Micro failed")
        end sub
    end class
end namespace
