import "pkg:/source/Integration/IntegrationTestSuite.bs"

namespace tests

    @suite("Snowplow component tests")
    class SnowplowTests extends IntegrationTestSuite

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        @describe("Initialization")
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        @beforeEach
        sub beforeEachInitialization()
            m.commonBeforeEach()
        end sub

        @it("supports multiple trackers with different namespaces")
        sub supportsMultipleTrackers()
            m.global.snowplow.init = {
                namespace: "ns1",
                network: {
                    collector: m.networkConfig.collector,
                    method: "POST"
                }
            }
            m.global.snowplow.init = {
                namespace: "ns2",
                network: {
                    collector: m.networkConfig.collector,
                    method: "GET"
                }
            }

            m.global.snowplow.ns1.structured = {
                se_ca: "category",
                se_ac: "action",
                se_la: "label",
                se_pr: "property",
                se_va: 100
            }
            m.global.snowplow.ns2.structured = {
                se_ca: "category",
                se_ac: "action",
                se_la: "label",
                se_pr: "property",
                se_va: 10
            }
            m.global.snowplow.ns2.selfDescribing = {
                data: {
                    id: CreateObject("roDeviceInfo").GetRandomUUID(),
                    name: "name",
                    type: "type"
                },
                schema: "iglu:com.snowplowanalytics.mobile/screen_view/jsonschema/1-0-0"
            }

            m.assertMicroCounts(function(counts)
                return counts.good = 3 and counts.bad = 0
            end function)

            m.assertMicroGoodEvents(function(good)
                namespaceCounts = { ns1: 0, ns2: 0 }
                for each event in good
                    namespaceCounts[event.event.name_tracker] += 1
                end for
                return namespaceCounts.ns1 = 1 and namespaceCounts.ns2 = 2
            end function)
        end sub

        @it("tracks using all tracker namespaces")
        sub tracksUsingAllTrackerNamespaces()
            m.global.snowplow.init = {
                namespace: "ns1",
                network: {
                    collector: m.networkConfig.collector,
                    method: "POST"
                }
            }
            m.global.snowplow.init = {
                namespace: "ns2",
                network: {
                    collector: m.networkConfig.collector,
                    method: "GET"
                }
            }

            m.global.snowplow.structured = {
                se_ca: "category",
                se_ac: "action",
                se_la: "label",
                se_pr: "property",
                se_va: 100
            }

            m.assertMicroCounts(function(counts)
                return counts.good = 2 and counts.bad = 0
            end function)

            m.assertMicroGoodEvents(function(good)
                namespaceCounts = { ns1: 0, ns2: 0 }
                for each event in good
                    namespaceCounts[event.event.name_tracker] += 1
                end for
                return namespaceCounts.ns1 = 1 and namespaceCounts.ns2 = 1
            end function)
        end sub

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        @describe("Event tracking to Micro")
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        @beforeEach
        sub beforeEachEventTracking()
            m.commonBeforeEach()
        end sub

        @it("tracks structured events")
        sub tracksStructuredEvent()
            m.global.snowplow.init = {
                network: m.networkConfig
            }
            m.global.snowplow.structured = {
                se_ca: "category",
                se_ac: "action",
                se_la: "label",
                se_pr: "property",
                se_va: 100
            }

            m.assertMicroCounts(function(counts)
                return counts.good = 1 and counts.bad = 0
            end function)
        end sub

        @it("tracks screen view events")
        sub tracksScreenViewEvent()
            m.global.snowplow.init = {
                network: m.networkConfig
            }
            m.global.snowplow.screenView = {
                id: CreateObject("roDeviceInfo").GetRandomUUID(),
                name: "name",
                type: "type",
                transitionType: "transitionType",
                previousName: "previousName",
                previousType: "previousType"
            }

            m.assertMicroCounts(function(counts)
                return counts.good = 1 and counts.bad = 0
            end function)
        end sub

        @it("tracks self-describing events")
        sub tracksSelfDescribingEvent()
            m.global.snowplow.init = {
                network: m.networkConfig
            }
            m.global.snowplow.selfDescribing = {
                data: {
                    id: CreateObject("roDeviceInfo").GetRandomUUID(),
                    name: "name",
                    type: "type"
                },
                schema: "iglu:com.snowplowanalytics.mobile/screen_view/jsonschema/1-0-0"
            }

            m.assertMicroCounts(function(counts)
                return counts.good = 1 and counts.bad = 0
            end function)
        end sub

        @it("tracks event with context")
        sub tracksEventWithContext()
            m.global.snowplow.init = {
                network: m.networkConfig
            }
            m.global.snowplow.structured = {
                se_ca: "category",
                se_ac: "action",
                se_la: "label",
                se_pr: "property",
                se_va: 100,
                context: [
                    {
                        data: {
                            id: CreateObject("roDeviceInfo").GetRandomUUID(),
                            name: "contextName",
                            type: "type"
                        },
                        schema: "iglu:com.snowplowanalytics.mobile/screen_view/jsonschema/1-0-0"
                    }
                ]
            }

            m.assertMicroCounts(function(counts)
                return counts.good = 1 and counts.bad = 0
            end function)

            m.assertMicroGoodEvents(m.containsCustomContext)
        end sub

        private function containsCustomContext(events)
            event = events[0]
            context = []
            for each entity in event.event.contexts.data
                if entity.data.name = "contextName" then context.push(entity)
            end for
            return context.count() = 1
        end function

        @it("adds device info context")
        sub addsDeviceInfoContext()
            m.global.snowplow.init = {
                network: m.networkConfig
            }
            m.global.snowplow.structured = {
                se_ca: "category",
                se_ac: "action",
                se_la: "label"
            }

            m.assertMicroGoodEvents(m.containsDeviceInfoContext)
        end sub

        private function containsDeviceInfoContext(events)
            event = events[0]
            context = []
            for each entity in event.event.contexts.data
                if entity.schema.Instr("device_info") >= 0 then context.push(entity)
            end for
            return context.count() = 1 and context[0].data.osVersion <> invalid and context[0].data.RIDA <> invalid
        end function

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ' private helpers
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        private sub commonBeforeEach()
            m.resetMicro()

            ' initialize Snowplow instance
            m.global.AddField("snowplow", "node", false)
            m.global.snowplow = CreateObject("roSGNode", "Snowplow")
        end sub
    end class
end namespace
